[{"bbox": [123, 99, 1606, 1420], "category": "Text", "text": "pst.setLong(5, stationLog callTime)\npst.setLong(6, stationLog duration)\n}\n},\nJdbcExecutionOptions builder\n//批次提交大小,默认500\n.withBatchSize(1000)\n//批次提交间隔间隔时间,默认0,即批次大小满足后提交\n.withBatchIntervalMs(1000)\n//最大重试次数,默认3,JDBC XA接收器要求maxRetries等于0,否则可能导致重复。\nwithMaxRetries(0)\n.build(),\nJdbcExactlyOnceOptions builder\n//只允许每个连接有一个XA事务\n.withTransactionPerConnection(true)\n.build(),\n//该方法必须new方式,否则会报错The implementation of the XaFacade is not serializable. The object probak\nnew SerializableSupplier[XADatasource] {\noverride def get(): XADatasource = {\nval xaDataSource = new MysqlXADatasource\nxaDataSource.setUrl(\"jdbc:mysql://node2:3306/mydb?useSSL=false\")\nxaDataSource.setUser(\"root\")\nxaDataSource.setPassword(\"123456\")\nxaDataSource\n}\n}\n)\n//将数据写入到JdbcSink\nds.addSink(JdbcExactlyOnceSink)\nenv.execute()"}, {"bbox": [111, 1466, 762, 1515], "category": "Title", "text": "3) 向Socket中输入以下数据查询mysql结果"}, {"bbox": [123, 1562, 485, 1779], "category": "Text", "text": "001,186,187,busy,1000,10\n002,187,186,fail,2000,20\n003,186,188,busy,3000,30\n004,188,186,busy,4000,40\n005,188,187,busy,5000,50"}, {"bbox": [111, 1839, 451, 1896], "category": "Section-header", "text": "6.6.3 KafkaSink"}]