[{"bbox": [122, 98, 1268, 954], "category": "Text", "text": "```java\nint indexOfThisSubtask = getRuntimeContext().getIndexOfThisSubtask();\nif (integer % 2 != 0 && indexOfThisSubtask == 0) {\n    ctx.collect integer;\n} else if (integer % 2 == 0 && indexOfThisSubtask == 1) {\n    ctx.collect integer;\n}\n}\n\n@Override\npublic void cancel() {\n    flag = false;\n}\n});\n\nds1.print(\"ds1\");\n\nSingleOutputStreamOperator<String> ds2 = ds1.forward().map(one -> one + \"xx\");\nds2.print(\"ds2\");\n\nenv.execute();\n```"}, {"bbox": [133, 999, 403, 1046], "category": "Title", "text": "## Scala代码实现"}, {"bbox": [122, 1093, 1440, 2075], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheフlinkKAstreaming.Kapi.KSA\n\nval ds1: DataStream[Integer] = env.addSource(new RichParallelSourceFunction[Integer] {\n    var flag = true\n\n    override def run(ctx: SourceFunction SourceContext[Integer]): Unit = {\n        val list = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        for (elem <- list) {\n            val subtask: Int = getRuntimeContext.getIndexOfThisSubtask\n            if (elem % 2 != 0 && 0 == subtask) {\n                ctx.collect(elem)\n            } else if (elem % 2 == 0 && 1 == subtask) {\n                ctx.collect(elem)\n            }\n        }\n    }\n\n    override def cancel(): Unit = {\n        flag = false\n    }\n```"}]