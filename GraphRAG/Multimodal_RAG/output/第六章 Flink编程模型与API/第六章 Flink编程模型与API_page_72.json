[{"bbox": [114, 120, 1372, 168], "category": "Text", "text": "2) 以上代码使用broadcast中涉及到Flink中的广播状态,关于这点后续章节再做介绍。"}, {"bbox": [114, 217, 559, 280], "category": "Title", "text": "### 6.7.6 global全局分区"}, {"bbox": [114, 311, 1557, 507], "category": "Text", "text": "在Flink中可以对oriDataStream调用global方法使用global partitioner全局分区策略将一个多分区的流转换到一个分区中,也就是说该方法会强制将多个上游task处理的数据发送到下游1个task中处理。如果oriDataStream数据流数据量非常少,可以通过该方法将数据汇集到一个task中处理提高效率,但如果oriDataStream数据流数据量大,该方法应该慎用。"}, {"bbox": [138, 605, 1560, 1170], "category": "Picture"}, {"bbox": [132, 1236, 388, 1282], "category": "Section-header", "text": "* **Java代码实现**"}, {"bbox": [126, 1332, 1408, 1501], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\noriDataStream<-Integer> ds = env.fromCollectionITE arrays-asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\nds.global().print(\"global\");\nenv.execute();\n```"}, {"bbox": [132, 1550, 403, 1596], "category": "Section-header", "text": "* **Scala代码实现**"}, {"bbox": [126, 1649, 1437, 1986], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n// 导入隐式转换\nimport org.apache.flink/apiidiscala\nval ds: oriDataStream[-Int] = env.fromCollectionE List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\nds.print(\"普通打印\")\n// 设置全局分区\nds.global.print(\"global\")\nenv.execute()\n```"}, {"bbox": [114, 2036, 1482, 2083], "category": "Text", "text": "**注意**：执行以上Java或者Scala代码，可以看到global算子最后输出的数据都被一个线程处理。"}]