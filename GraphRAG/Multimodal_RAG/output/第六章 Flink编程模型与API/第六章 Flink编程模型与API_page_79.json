[{"bbox": [120, 113, 525, 329], "category": "Text", "text": "```\n001,186,187,success,1000,10\n002,187,186,fail,2000,20\n003,186,188,success,3000,30\n004,188,186,success,4000,40\n005,188,187,busy,5000,50\n```"}, {"bbox": [113, 392, 608, 455], "category": "Section-header", "text": "## 6.9 ProcessFunction"}, {"bbox": [113, 490, 1554, 637], "category": "Text", "text": "Flink 的 ProcessFunction 是 DataStream API 中的一个重要组成部分, 它允许用户为流数据定义自定义的处理逻辑。ProcessFunction 提供了一种强大的机制, 用于低级别的流转换, 并完全控制数据事件、状态和时间。"}, {"bbox": [113, 673, 1569, 820], "category": "Text", "text": "ProcessFunction 是一个抽象类, 继承自 AbstractRichFunction富函数抽象类, 并有两个泛型类型参数: I (输入) 和 O (输出), 表示输入和输出的数据类型, 富函数类中拥有的方法 ProcessFunction 中都可以使用。"}, {"bbox": [113, 857, 762, 904], "category": "Text", "text": "ProcessFunction 中有两个核心方法, 如下:"}, {"bbox": [132, 941, 538, 990], "category": "List-item", "text": "* `processElement()` 方法"}, {"bbox": [113, 1025, 1554, 1121], "category": "Text", "text": "这个方法用于处理每个元素, 对于流中的每个元素, 都会调用一次。它的参数包括输入数据值 value、上下文 `ctx` 和收集器 `out`。方法没有返回值, 处理后的输出数据是通过收集器 `out` 定义的。"}, {"bbox": [124, 1171, 1602, 1296], "category": "Text", "text": "```java\npublic void processElement(对象类型 value, ProcessFunction<对象类型, 返回对象类型, >.Context ctx, Collector<...>\n)\n```"}, {"bbox": [132, 1344, 1284, 1393], "category": "List-item", "text": "* `value`: 表示当前流中正在处理的输入元素, 类型与流中数据类型一致。"}, {"bbox": [200, 1405, 1519, 1551], "category": "List-item", "text": "* `ctx`: 表示当前运行的上下文, 可以获取当前的时间戳, 并提供了定时服务 (TimerService), 用于查询时间和注册定时器, 还可以将数据发送到侧输出流 (side output)。"}, {"bbox": [200, 1562, 1427, 1611], "category": "List-item", "text": "* `out`: 表示输出数据的收集器, 使用 `out.collect()` 方法可以向下游发出一个数据。"}, {"bbox": [132, 1622, 418, 1670], "category": "List-item", "text": "* `onTimer()` 方法"}, {"bbox": [113, 1705, 1419, 1802], "category": "Text", "text": "这个方法用于定义定时触发的操作, 只有在注册的定时器触发时才会调用。定时器是通过 TimerService 注册的, 相当于设定了一个闹钟, 到达设定的时间就会触发。"}, {"bbox": [113, 1838, 442, 1885], "category": "Text", "text": "注册定时器方法如下:"}, {"bbox": [124, 1937, 987, 1978], "category": "Text", "text": "```java\nctx[timerService().registerProcessingTimeTimer(定时器触发时间)];\n```"}, {"bbox": [113, 2027, 674, 2074], "category": "Text", "text": "定时器触发后调用`onTimer`方法如下:"}]