[{"bbox": [107, 120, 1577, 273], "category": "Text", "text": "KeyBy算子用于将输入的oriDataStream按照指定的键或键选择器函数进行分组操作,它接受一个键选\n择器函数作为参数,该函数根据输入元素返回一个键,用于将数据流中的元素分组到不同的分区中,\n相同键的元素分配到同一个分区中,以便后续的操作可以基于键对数据进行聚合、合并或其他操作。"}, {"bbox": [107, 305, 1589, 553], "category": "Text", "text": "KeyBy算子使用时可以通过KeySelector函数来指定key键, DataStream通过KeyBy算子处理后得到\n的是KeyedStream对象,该对象也是oriDataStream。默认KeyBy算子会对数据流中指定的key键的\nhash值与Flink分区数(并行度)进行取模运算,从而决定该条数据后续被哪个并行度处理,如果\nFlink DataStream类型是POJOs类型,需要在该类型中重写hashCode方法,否则后续不能正确的将\n相同数据进行分组处理。"}, {"bbox": [107, 587, 1423, 640], "category": "Text", "text": "下图表示通过KeyBy算子将oriDataStream中的数据按照指定的key进行分组统计value总和。"}, {"bbox": [127, 734, 1562, 1641], "category": "Picture"}, {"bbox": [133, 1696, 390, 1746], "category": "Title", "text": "• Java代码实现"}, {"bbox": [124, 1795, 1410, 2094], "category": "Text", "text": "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\noriDataStreamSource.<Tuple2<String, Integer>> ds = env.fromCollection(Arrays.asList(\n    Tuple2.of(\"a\", 1),\n    Tuple2.of(\"b\", 2),\n    Tuple2.of(\"c\", 3),\n    Tuple2.of(\"a\", 4),\n    Tuple2.of(\"b\", 5));"}]