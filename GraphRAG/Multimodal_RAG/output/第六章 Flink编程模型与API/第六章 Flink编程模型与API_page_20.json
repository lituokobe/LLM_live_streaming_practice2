[{"bbox": [108, 99, 1575, 302], "category": "Text", "text": "flatMap算子用于对输入的Stream中的每个元素进行扁平化映射操作的算子，它接受一个函数作为参数，该函数将每个输入元素转换为零个或多个新的元素，并生成一个新的Stream数据流作为输出。DataStream类型数据通过map函数进行数据转换后还会得到)aStream类型，其中数据格式可能会发生变化。"}, {"bbox": [108, 335, 1582, 434], "category": "Text", "text": "与map算子不同, flatMap算子可以生成比输入更多的元素, 因此可以用于扁平化操作。下图表示通过MAP函数对输入数据流进行处理, 将原始数据流分割为多条子流, 然后对每条子流执行map操作。"}, {"bbox": [158, 554, 1556, 886], "category": "Picture"}, {"bbox": [131, 967, 390, 1014], "category": "List-item", "text": "* **Java代码实现**"}, {"bbox": [124, 1064, 1482, 1619], "category": "Text", "text": "StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n)aStreamSource(String) ds = env.fromCollectionITEs("}, {"bbox": [131, 1665, 414, 1712], "category": "List-item", "text": "* **Scala代码实现**"}, {"bbox": [124, 1762, 1439, 2017], "category": "Text", "text": "val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheomaticap._\nval ds: DataStream�est = env.fromCollectionEiS(\"1,2\", \"3,4\", \"5,6\", \"7,8\")\nds.map(vsplit(v)).print()\nenv.execute()"}]