[{"bbox": [107, 99, 1546, 199], "category": "Text", "text": "用不同语言编程导入的包也不同,在获取到对应的Environment后我们还可以进行外参数的配置,\n例如:并行度、容错机制设置等。"}, {"bbox": [107, 234, 1584, 433], "category": "Text", "text": "DataSource部分主要定义了数据接入功能,主要是将外部数据接入到Flink系统中并转换成\nerezStream对象供后续的转换使用。Transformation部分有各种各样的算子操作可以对\nerezStream流进行转换操作,最终将转换结果数据通过DataSink写出到外部存储介质中,例如:文\n件、数据库、Kafka消息系统等。"}, {"bbox": [107, 468, 1559, 569], "category": "Text", "text": "在erezStream编程中编写完成DataSink代码后并不意味着程序结束,由于Flink是基于事件驱动处\n理的,有一条数据时就会进行处理,所以最后一定要使用Environment.execute()来触发程序执行。"}, {"bbox": [110, 613, 528, 678], "category": "Title", "text": "6.2.2 Flink数据类型"}, {"bbox": [107, 710, 1574, 958], "category": "Text", "text": "在Flink内部处理数据时,涉及到数据的网络传输、数据的序列化及反序列化,Flink需要知道操作的\n数据类型,为了能够在分布式计算过程中对数据的类型进行管理和判断,Flink中定义了\nTypeInformation来对数据类型进行描述,通过TypeInfomation能够在数据处理之前将数据类型推\n断出来,而不是真正在触发计算后才识别出,这样可以有效避免用户在编写Flink应用的过程出现数\n据类型问题。"}, {"bbox": [107, 992, 1574, 1093], "category": "Text", "text": "常用的TypeInformation有BasicTypeInfo、TupleyerTypeInfo、CaseClassyerTypeInfo、PojoyerTypeInfo\n类等,针对这些常用TypeInformation介绍如下:"}, {"bbox": [126, 1120, 1579, 1670], "category": "List-item", "text": "* Flink通过实现BasicTypeInfo数据类型,能够支持任意Java原生基本(或装箱)类型和String类型,例如:Integer,String,Double等,除了BasicTypeInfo外,类似的还有BasicArrayyerTypeInfo,支持Java中数组和集合类型;\n* 通过定义TupleyerTypeInfo来支持Tuple类型的数据;\n* 通过CaseClassTypeInfo支持Scala Case Class;\n* PojoyerTypeInfo可以识别任意的POJOs类,包括Java和Scala类,POJOs可以完成复杂数据架构的定义,但是在Flink中使用POJOs数据类型需要满足以下要求:\n  * POJOs类必须是Public修饰且独立定义,不能是内部类;\n  * POJOs 类中必须含有默认空构造器;\n  * POJOs类中所有的Fields必须是Public或者具有Public修饰的getter和 Setter方法;"}, {"bbox": [107, 1700, 1565, 1899], "category": "Text", "text": "在使用Java API开发Flink应用时,通常情况下Flink都能正常进行数据类型推断进而选择合适的\nserializers以及comparators,但是在定义函数时如果使用到了泛型,JVM就会出现类型擦除的问\n题,Flink就获取不到对应的类型信息,这就需要借助类型提示(Type Hints)来告诉系统函数中传\n入的参数类型信息和输出类型,进而对数据类型进行推断处理。如:"}, {"bbox": [123, 1946, 1205, 2078], "category": "Text", "text": "SingleOutputStreamOperator[Tuple2oton, Long] kvWordsDS =\n    linesurerseMap((String line, Collector[Tuple2 String, Long] collector) -> {\n        String[] words = line.split(\" \");"}]