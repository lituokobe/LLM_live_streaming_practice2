[{"bbox": [106, 95, 1562, 200], "category": "Text", "text": "侧输出适合Flink中流分割处理、异常数据处理、延迟数据处理场景，例如常见的延迟数据处理场景中可以通过侧输出避免丢弃延迟到达的数据。关于Flink中延迟到达的数据在后续章节介绍。"}, {"bbox": [106, 229, 1215, 286], "category": "Text", "text": "案例：Flink读取Socket中通话数据，将成功和不成功的数据信息分别输出。"}, {"bbox": [128, 317, 394, 367], "category": "Title", "text": "## Java代码实现"}, {"bbox": [122, 410, 1611, 2074], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n/**\n * Socket中的数据格式如下:\n * 001,186,187,success,1000,10\n * 002,187,186,fail,2000,20\n * 003,186,188,success,3000,30\n * 004,188,186,success,4000,40\n * 005,188,187,busy,5000,50\n */\nuloStreamSource�ation<St\n//定义侧输出流的标签\noutpuTag = new OutputTag\nSingleOutputStreamOperator\n@Override\npublic void processElement(String value, ProcessFunction\n//value 格式: 001,186,187,success,1000,10\nString[] split = value.split(\",\");\nString callType = split[3]; //通话类型\n//判断通话类型\nif (\"success\".equals(callType)) {\n    //成功类型,输出到主流\n    out.collect(value);\n} else {\n    //其他类型,输出到侧输出流\n    ctx.output(outputTag, value);\n}\n}\n});\n\n//获取主流\nmainStream.print(\"主流\");\n\n//获取侧输出流\nmainStream.getSideOutput(outputTag).print(\"侧输出流\");\n\nenv.execute();\n```"}]