[{"bbox": [109, 98, 350, 159], "category": "Title", "text": "### 6.4.3 Filter"}, {"bbox": [109, 189, 1585, 343], "category": "Text", "text": "filter算子用于对输入的Stream中的元素进行条件过滤操作,它接受一个函数作为参数,该函数针对每个输入元素返回一个布尔值,如果函数返回true,则输入元素将被保留在输出Stream中,否则将被过滤掉。Filter算子不会改变Stream数据类型,输入和输出都是DStream。"}, {"bbox": [109, 373, 1562, 475], "category": "Text", "text": "下图表示通过filter算子对输入数据集中的元素进行筛选,只保留满足偶数特定条件的元素,并将其输出到下游数据流。"}, {"bbox": [141, 593, 1553, 930], "category": "Picture"}, {"bbox": [129, 1000, 391, 1050], "category": "Section-header", "text": "* **Java代码实现**"}, {"bbox": [123, 1096, 1410, 1569], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nDataStreamSource<Integer> ds = env.fromCollectionITE arrays.asList(1, 2, 3, 4, 5, 6, 7, 8));\nSingleOutputStreamOperator<Integer> filter = ds.filter(new FilterFunction<Integer>() {\n    @Override\n    public boolean filter Integer value) throws Exception {\n        return value % 2 == 0;\n    }\n});\n\nfilter.print();\nenv.execute();\n```"}, {"bbox": [129, 1614, 406, 1663], "category": "Section-header", "text": "* **Scala代码实现**"}, {"bbox": [123, 1710, 1025, 1970], "category": "Text", "text": "```scala\nval env = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheフlinkKAstreaming.KapiK_\nval stream = env.fromElements(1, 2, 3, 4, 5, 6, 7, 8, 9)\nstream.filter(_ % 2 == 0).print()\nenv.execute()\n```"}, {"bbox": [109, 2028, 368, 2094], "category": "Title", "text": "### 6.4.4 keyBy"}]