[{"bbox": [120, 139, 1610, 573], "category": "Text", "text": "```java\nKeyedStream[Tuple2<String, Integer>, String> keyedStream = ds.keyBy(new KeySelector[Tuple2<String, Integer>>(\n    @Override\n    public String getKey(Tuple2<String, Integer> tp) throws Exception {\n        return tp.f0;\n    }\n));\n\nkeyedStream.sum(1).print();\n\nenv.execute();\n```"}, {"bbox": [131, 613, 407, 666], "category": "Title", "text": "* **Scala代码实现**"}, {"bbox": [120, 709, 1442, 1226], "category": "Text", "text": "```groovy\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apache flink api scala_\n\nval ds: DataStream[(String, Int)] = env.fromCollection(List((\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n    (\"a\", 4),\n    (\"b\", 5)))\n\nds.keyBy.tp=>{tp._1}.sum(1).print()\nenv.execute()\n```"}, {"bbox": [112, 1284, 537, 1349], "category": "Section-header", "text": "## 6.4.5 Aggregations"}, {"bbox": [112, 1381, 1544, 1476], "category": "Text", "text": "Aggregations (聚合函数) 是Flink中用于对输入数据进行聚合操作的函数集合, 它们可以应用于 KeyedStream上, 将一组输入元素聚合为一个输出元素。"}, {"bbox": [112, 1510, 1536, 1611], "category": "Text", "text": "Flink提供了多种聚合函数, 包括sum、min、minBy、max、maxBy, 这些函数都是常见的聚合操作, 作用如下:"}, {"bbox": [131, 1645, 1582, 2019], "category": "Text", "text": "* sum：针对输入keyedStream对指定列进行sum求和操作。\n* min：针对输入keyedStream对指定列进行min最小值操作，结果流中其他列保持最开始第一条数据的值。\n* minBy：同min类似，对指定的字段进行min最小值操作minBy返回的是最小值对应的整个对象。\n* max：针对输入keyedStream对指定列进行max最大值操作，结果流中其他列保持最开始第一条数据的值。"}]