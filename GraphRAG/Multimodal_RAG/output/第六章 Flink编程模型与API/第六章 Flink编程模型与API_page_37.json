[{"bbox": [123, 114, 1597, 2071], "category": "Text", "text": "object RichFunctionTest {\n  def main(args: Array String): Unit = {\n    val env = StreamExecutionEnvironment.getExecutionEnvironment\n    //导入隐式转换\n    import org.apache flink api Play\n\n    /**\n     * Socket中的数据格式如下:\n     * 001,186,187,busy,1000,10\n     * 002,187,186,fail,2000,20\n     * 003,186,188,busy,3000,30\n     * 004,188,186,busy,4000,40\n     * 005,188,187,busy,5000,50\n     */\n    val ds: DataStream String = env.socketTextStream(\"node5\", 9999)\n    ds.map(new MyRichMapFunction).print()\n\n    env.execute()\n  }\n}\n\nprivate class MyRichMapFunction extends RichMapFunction String, String {\n  private var conn: Connection = _\n  private var pst: PreparedStatement = _\n  private var rst: ResultSet = _\n\n  // open()方法在map方法之前执行,用于初始化\n  override def open parameters: Configuration): Unit = {\n    conn = DriverManagerrigs=\"jdbc:mysql://node2:3306/mydb?useSSL=false\", \"root\", \"123456\"\n    pst = conn preparesStatement(\"select * from person_info where phone_num = ?\")\n  }\n\n  // map方法,输入一个元素,返回一个元素\n  override def map(value: String): String = {\n    //value 格式: 001,186,187,busy,1000,10\n    val split: Array String = value.split(\",\")\n    val sid: String = split(0)\n    val callOut: String = split(1) //主叫\n    val callIn: String = split(2) //被叫\n    val callType: String = split(3) //通话类型\n    val callTime: String = split(4) //通话时间\n    val duration: String = split(5) //通话时长\n    //mysql中获取主叫和被叫的姓名\n    var callOutName =\"\n    var callInName =\"\n\n    pstear String(1, callOut)"}]