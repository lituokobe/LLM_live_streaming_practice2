[{"bbox": [122, 98, 1604, 2057], "category": "Text", "text": "```groovy\n//创建 JDBCClient 共享对象, 多个 Vertx 客户端可以共享一个 JDBCClient 实例\nmysqlClient = JDBCClient.createShared(vertx, config)\n}\n\n//实现异步IO的方法,第一个参数是输入,第二个参数是异步IO返回的结果\noverride def asyncInvoke(input: Int, resultFuture: ResultFuture String): Unit = {\n    //获取MySQL连接\n    mysqlClient.getConnection(new Handler[AsyncResult[SQLConnection]] {\n        override def handle/sqlConnectionAsyncResult: AsyncResult[SQLConnection]): Unit = {\n            if(!sqlConnectionAsyncResult failed()) {\n                //获取连接\n                val connection: SQLConnection = sqlConnectionAsyncResult.result()\n\n                //执行查询\n                connection.query(\"select id,name,age from async_tbl where id = \" + input, new Handler[AsyncResult[ResultFuture<\n                    Unit]] {\n                        override def handle(resultSetAsyncResult: AsyncResult[ ResultSet]): Unit = {\n                            if(!resultSetAsyncResult failed()) {\n                                //获取查询结果\n                                val ResultSet: ResultSet = ResultSetAsyncResult.result()\n                                ResultSet.getRows().asScala.forEach(row => {\n                                    //返回结果\n                                    resultFuture(complete(List(row.encode()))\n```"}]