[{"bbox": [123, 99, 901, 528], "category": "Text", "text": "```groovy\n}\n})\n\nds1.print(\"ds1\")\nval ds2: DataStream(String] = ds1.forward.map(one -> {\n    one + \"xx\"\n})\nds2.print(\"ds2\")\nenv.execute()\n```"}, {"bbox": [113, 589, 838, 652], "category": "Section-header", "text": "## 6.7.8 partitionCustom 自定义分区"}, {"bbox": [113, 682, 1578, 879], "category": "Text", "text": "partitionCustom算子是Flink中用于自定义数据分区的算子,通过实现自定义的分区函数,可以根据特定需求对数据进行灵活的分区操作,实现满足用户定制化的分区策略。在使用partitionCustom算子时需要传入2个参数,第一个参数用户实现的分区器Partitioner对象,该分区器决定流数据去往下游哪些分区,第二个参数指定应用分区器的字段。"}, {"bbox": [134, 916, 388, 959], "category": "Section-header", "text": "* **Java代码实现**"}, {"bbox": [123, 1011, 1439, 2073], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n/**\n * Socket中输入数据如下格式数据\n * a,1\n * b,2\n * a,3\n * b,4\n * c,5\n */\nStreamSource<String> ds1 = env.socketTextStream(\"node5\", 9999);\nSingleOutputStreamOperator[Tuple2<String, Integer>> ds2 = ds1.map(one -> {\n    String[] arr = one.split(\",\");\n    return Tuple2.of(arr[0], Integer.valueOf(arr[1]));\n}).returns(Types.TUPLE(Types.SSTRING, Types.INT));\n\nStream[Tuple2<String, Integer>> result = ds2rovpartitionCustom(new Partitioner<String>() {\n    @Override\n    public int partition(String key, int numPartitions) {\n        return keyimumCode() % numPartitions;\n    }\n}, new KeySelector[Tuple2<String, Integer>, String>() {\n    @Override\n    public String getKey(Tuple2<String, Integer> tp) throws Exception {\n        return tp.f0;\n    }\n```"}]