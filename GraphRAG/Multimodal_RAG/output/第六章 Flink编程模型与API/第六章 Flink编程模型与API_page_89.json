[{"bbox": [123, 104, 1603, 2096], "category": "Text", "text": "```kotlin\n/**\n * 实现Flink异步IO方式一:使用 Vert.x 实现异步 IO\n * 案例:读取MySQL中的数据\n */\nobject AsyncIOTest1 {\n    def main(args: Array String): Unit = {\n        val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n        //为了测试效果,这里设置并行度为1\n        env.setParallelism(1)\n\n        //导入隐式转换\n        import org.apache.flink streaming api scala._\n\n        //准备数据流\n        val idDS: DataStream [Int] = env.fromCollection (List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\n        AsyncStream. unorderedWait (idDS, new AsyncDatabaseRequest1(), 5000, java.util.concurrentTimeUnit print ()\n\n        env.execute ()\n    }\n}\n\nclass AsyncDatabaseRequest1 extends RichAsyncFunction [Int, String]() {\n\n    //定义JDBCClient对象\n    var mysqlClient: JDBCClient = null\n\n    //初始化资源,连接MySQL\n    override def open (parameters: Configuration): Unit = {\n        //创建连接MySQL的配置信息\n        val config: JsonObject = new JsonObject ()\n            .put(\"url\", \"jdbc:mysql://node2:3306/mydb?useSSL=false\")\n            .put(\"driver_class\", \"com.mysql.jdbc.Driver\")\n            .put(\"user\", \"root\")\n            .put(\"password\", \"123456\")\n\n        //创建VertxOptions对象\n        val vo = new VertxOptions ()\n        //设置Vertx要使用的事件循环线程数\n        vo.setEventLoopPoolSize (10)\n        //设置Vertx要使用的最大工作线程数\n        vo.setWorkerPoolSize (20)\n\n        //创建Vertx对象\n        val vertx = io vertx core Vertx vertx (vo)\n```"}]