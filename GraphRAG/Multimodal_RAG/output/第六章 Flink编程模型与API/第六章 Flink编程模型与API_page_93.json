[{"bbox": [123, 101, 674, 398], "category": "Text", "text": "```java\n//关闭资源\n@Override\npublic void close() throws Exception {\n    //关闭线程池\n    executorService.shutdown();\n}\n}\n```"}, {"bbox": [134, 448, 333, 491], "category": "Section-header", "text": "## • Scala代码"}, {"bbox": [123, 545, 1604, 2028], "category": "Text", "text": "```java\n/**\n * 实现Flink异步IO方式二:线程池模拟异步客户端\n * 案例:读取MySQL中的数据\n */\nobject AsyncIOTest2 {\n    def main(args: Array String): Unit = {\n        val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n        //为了测试效果,这里设置并行度为1\n        env.setParallelism(1)\n\n        //导入隐式转换\n        import org.apache flink streaming api scala._\n\n        //准备数据流\n        val idDS: DataStream [Int] = env.fromCollection (List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\n    /**\n     * 使用异步IO,参数解释如下:\n     * 第一个参数是输入数据流,\n     * 第二个参数是异步IO的实现类,\n     * 第三个参数是用于完成异步操作超时时间,\n     * 第四个参数是超时时间单位,\n     * 第五个参数可以触发的最大异步i/o操作数\n     */\n        AsyncDataStream.unorderedWait (idDS, new AsyncDatabaseRequest2(), 5000, java.util.concurrentTimeUnit print ()\n\n        env.execute()\n    }\n}\n\nclass AsyncDatabaseRequest2 extends RichAsyncFunction [Int, String]() {\n    //准备线程池对象\n    var executorService: ExecutorService = null\n```"}]