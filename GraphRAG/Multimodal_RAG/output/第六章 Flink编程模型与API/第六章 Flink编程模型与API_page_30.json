"[{\"bbox\": [125, 102, 317, 189], \"category\": \"Text\", \"text\": \"```java\\nresult.print()\\nenv.execute()\\n```\"}, {\"bbox\": [110, 235, 1475, 334], \"category\": \"Text\", \"text\": \"注意：以上代码协处理函数中涉及到ctx Flink上下文对象，可以通过该对象获取timestamp、watermark对象及注册定时器等，关于这部分后续章节讲解。\"}, {\"bbox\": [110, 384, 383, 444], \"category\": \"Title\", \"text\": \"## 6.4.9 iterate\"}, {\"bbox\": [110, 477, 1598, 626], \"category\": \"Text\", \"text\": \"iterate算子用于实现迭代计算的算子，它允许对输入的ori-DataStream进行多次迭代操作，直到迭代条件不满足时迭代停止，该算子适合迭代计算场景，例如：机器学习中往往会对损失函数进行判断是否到达某个精度来判断训练是否需要结束就可以使用该算子来完成。\"}, {\"bbox\": [110, 712, 1573, 1018], \"category\": \"Picture\"}, {\"bbox\": [109, 1075, 1598, 1275], \"category\": \"Text\", \"text\": \"该算子接受一个初始输入流作为起点，整个迭代过程由两部分组成：迭代体和迭代条件，迭代体负责对输入的数据流进行处理，迭代条件用来判断本次流是否应该继续作为输入流反馈给迭代体继续迭代，满足条件的数据会继续作为输入流进入迭代体进行迭代计算直到不满足迭代条件为止。注意：无论数据流是否满足迭代条件都会输出到下游。\"}, {\"bbox\": [109, 1309, 1543, 1408], \"category\": \"Text\", \"text\": \"这里以Flink读取Socket数字为例，迭代体对输入数据进行减少操作，迭代条件判断数据是否小于0，数据不小于0时继续执行迭代体进行迭代计算，否则迭代计算终止。\"}, {\"bbox\": [132, 1443, 392, 1493], \"category\": \"Section-header\", \"text\": \"* **Java代码实现**\"}, {\"bbox\": [122, 1540, 1418, 2056], \"category\": \"Text\", \"text\": \"```java\\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\nori-DataStreamSource<String> ds1 = env.socketTextStream(\\\"node5\\\", 9999);\\n//对数据流进行转换\\nSingleOutputStreamOperator<Integer> ds2 = ds1.map(new MapFunction<String, Integer>() {\\n    @Override\\n    public Integer map(String s) throws Exception {\\n        return Integer\\n        return Integer.valueOf(s);\\n    }\\n});\\n\\n//使用 iterate() 方法创建一个迭代流 iterate，用于支持迭代计算\\nIter"