[{"bbox": [119, 100, 1605, 1634], "category": "Text", "text": "```groovy\nval ds: DataStream(String] = env.socketTextStream(\"node5\", 9999)\nval mainDS: DataStream[(String, String)] = ds.map(one => {\n    val arr: Array String] = one.split(\",\")\n    (arr(0), arr(1))\n})\n\n//获取用户基本信息\nval baseInfo: DataStream[(String, String)] = env.fromCollection(List((\"zs\", \"北京\"), (\"ls\", \"上海\"), (\"ww\", \"广州\")))\n\n//设置mapDescriptor\nval msd = new MapStateDescriptor String, String)(\"map-descriptor\", classOf String, classOf String)\n\n//广播用户基本信息\nval bcDS: BroadcastStream[(String, String)] = baseInfo broadcasts msd\n\n//连接主流和广播流\nmainDS.connect(bcDS).process(new BroadcastProcessFunction[(String, String),(String, String),String] {\n    //处理主流数据\n    override def processElement(value: (String, String), ctx: BroadcastProcessFunction[(String, String), (String, String), String])\n    //获取广播对象\n    val map = ctx.getBroadcastState(msd)\n    //获取学生地址信息\n    val stuInfo = map(value._1)\n    //输出学生信息\n    out.collect(value._1 + \",\" + value._2 + \",\" + stuInfo)\n})\n\n//处理广播流数据\noverride def processBroadcastElement(value: (String, String), ctx: BroadcastProcessFunction[(String, String), (String, String)]\n    //获取广播对象\n    val map = ctx.getBroadcastState(msd)\n    //将广播流数据放入广播对象中\n    map.put(value._1,value._2)\n})\n}).print()\nenv.execute()\n```"}, {"bbox": [112, 1680, 475, 1728], "category": "Text", "text": "执行代码注意以下两点："}, {"bbox": [112, 1765, 1058, 1810], "category": "Text", "text": "1) 以上Java或者Scala代码执行后在Socket中输入如下数据即可:"}, {"bbox": [126, 1864, 234, 2071], "category": "Text", "text": "```\nzs,100\nls,200\nww,300\nml,400\ntq,500\n```"}]