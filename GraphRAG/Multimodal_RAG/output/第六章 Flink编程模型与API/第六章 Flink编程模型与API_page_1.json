[{"bbox": [104, 95, 1593, 302], "category": "Text", "text": "在ibiStream/DataSet API 之上是Table API, Table API和ibiStream/DataSet API不同, 不是用复杂的函数定义业务流程的, 而是用陈述性的语言加以描述, 这样就大大降低编程难度, 增强描述性。这种语言来着SQL语法, 只不过以API的形式呈现出来, 既然有了Table API, 那么自然可以直接使用SQL来进行描述, 这就是最上层的SQL。"}, {"bbox": [116, 329, 263, 387], "category": "List-item", "text": "*   SQL"}, {"bbox": [104, 414, 1585, 520], "category": "Text", "text": "Flink提供的最高层级的抽象是SQL,这一层抽象在语法与表达能力上与Table API类似,SQL抽象与Table API交互密切,同时SQL查询可以直接在Table API定义的表上执行。"}, {"bbox": [104, 549, 1585, 702], "category": "Text", "text": "总而言之,越上层的API,其描述性和可阅读性越强,越下层API,其灵活度高、表达力越强,多数时候上层API能做到的事情,下层API也能做到,反过来未必,不过这些API的底层模型是一致的,可以混合使用。"}, {"bbox": [104, 731, 1585, 1034], "category": "Text", "text": "Flink架构可以处理批和流,Flink 批处理数据需要使用到Flink中的DataSet API,此API主要是支持Flink针对批数据进行操作,本质上Flink处理批数据也是看成一种特殊的流处理(有界流),所以没有必要分成批和流两套API,从Flink1.12版本往后,Dataset API 已经标记为Legacy(已过时),已被官方软弃用,官方建议使用Table API 或者SQL 来处理批数据,我们也可以使用带有Batch执行模式的ibiStream API来处理批数据(DataSet和ibiStream API做到了合并),在未来Flink版本中DataSet API 将会被删除。"}, {"bbox": [104, 1065, 1585, 1171], "category": "Text", "text": "ibiStream API的学习对于理解Flink数据处理流程非常方便,上手相对来说比较容易,下面我们先从核心API层开始学习,对于底层API、Table API、SQL部分在后续章节在做介绍。"}, {"bbox": [104, 1215, 535, 1289], "category": "Section-header", "text": "## 6.2 Flink编程模型"}, {"bbox": [104, 1327, 523, 1397], "category": "Section-header", "text": "### 6.2.1 代码编写流程"}, {"bbox": [104, 1422, 1397, 1524], "category": "Text", "text": "在第二章节学习中我们知道ibiStream的编程模型包括以下几个部分:Environment、DataSource、Transformation、DataSink、触发执行。"}, {"bbox": [141, 1648, 1542, 1865], "category": "Picture"}, {"bbox": [104, 1928, 1585, 2083], "category": "Text", "text": "Environment是编写Flink程序的基础,不同层级API编程中创建的Environment环境不同,如:\nDataset 编程中需要创建ExecutionEnvironment,ibiStream编程中需要创建StreamExecutionEnvironment,在Table和SQL API中需要创建TableExecutionEnvironment,使"}]