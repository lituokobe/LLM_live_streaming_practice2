[{"bbox": [110, 131, 594, 194], "category": "Title", "text": "### 6.7.7 forward并行分区"}, {"bbox": [110, 225, 1575, 374], "category": "Text", "text": "在Flink中可以对oriDataStream调用forward方法使用forward partitioner并行分区策略原封不动的将上游分区数据转发到下游分区中,即上游分区数据分发到下游对应分区一对一的数据分发。map、 flatMap、filter 等算子上下游并行度一样时默认就是这种分区策略。"}, {"bbox": [157, 497, 1534, 1226], "category": "Picture"}, {"bbox": [524, 1322, 1174, 1403], "category": "Title", "text": "#### forward 并行分区"}, {"bbox": [110, 1479, 1467, 1578], "category": "Text", "text": "**注意**：显示在代码中显示指定了forward后，并行度不能改变，否则报错。如果map、filter、MAP、FlatMap这类算子上下游并行度不一样默认使用的rebalance partitioner分区策略。"}, {"bbox": [135, 1614, 388, 1658], "category": "Title", "text": "* **Java代码实现**"}, {"bbox": [125, 1711, 1440, 2093], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\noriStreamSource = env.addSource(new RichParallelSourceFunction beschlang() {\n    Boolean flag = true;\n\n    @Override\n    public void run(SourceContext beschlang ctx) throws Exception {\n        List beschlang integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        for (Integer integer : integers) {\n```"}]