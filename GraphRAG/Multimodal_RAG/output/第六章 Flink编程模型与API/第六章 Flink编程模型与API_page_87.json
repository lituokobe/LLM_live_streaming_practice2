[{"bbox": [126, 103, 1483, 2052], "category": "Text", "text": "```java\n    .print();\n\n    env.execute();\n}\n}\n\nclass AsyncDatabaseRequest1 extends RichAsyncFunction<Integer, String> {\n    //定义JDBCClient共享对象\n    JDBCClient mysqlClient = null;\n\n    //初始化资源,连接Mysql\n    @Override\n    public void open Configuration parameters) throws Exception {\n        //创建连接mysql配置对象\n        JsonObject config = new JsonObject()\n            .put(\"url\", \"jdbc:mysql://node2:3306/mydb?useSSL=false\")\n            .put(\"driver_class\", \"com.mysql.jdbc Drivers\")\n            .put(\"user\", \"root\")\n            .put(\"password\", \"123456\");\n\n        //创建VertxOptions对象\n        VertxOptions vo = new VertxOptions();\n        //设置Vertx要使用的事件循环线程数\n        vo.setEventLoopPoolSize(10);\n        //设置Vertx要使用的最大工作线程数\n        vo.setWorkerPoolSize(20);\n\n        //创建Vertx对象\n        Vertx vertx = Vertx vertx vo);\n\n        //创建JDBCClient共享对象,多个Vertx 客户端可以共享一个JDBCClient对象\n        mysqlClient = JDBCClient.createShared(vertx, config);\n    }\n\n    //实现异步IO的方法,第一个参数是输入,第二个参数是异步IO返回的结果\n    @Override\n    public void asyncInvoke Integer input, ResultFuture <String> resultFuture) {\n        mysqlClientrigConnection(new Handler <AsyncResult<SQLConnection>>() {\n            @Override\n            public void handle(AsyncResult<SQLConnection> sqlConnectionAsyncResult) {\n                if (sqlConnectionAsyncResult failed()) {\n                    System.out.println(\"获取连接失败: \" + sqlConnectionAsyncResult.cause().getMessage());\n                    return;\n                }\n            }\n```"}]