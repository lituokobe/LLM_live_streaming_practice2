[{"bbox": [122, 99, 1600, 1079], "category": "Text", "text": "```java\n//定义迭代体:在迭代流 iterate 上进行映射转换,将每个整数元素减去1,并返回一个新的数据流\nSingleOutputStreamOperator<Integer> minusOne = iterate.map(new MapFunction<Integer, Integer>() {\n    @Override\n    public Integer map Integer value) throws Exception {\n        System.out.println(\"迭代体中输入的数据为:\" + value);\n        return value - 1;\n    }\n});\n\n//定义迭代条件,满足迭代条件的继续进入迭代体进行迭代,否则不迭代\nSingleOutputStreamOperator<Integer> stillGreatorThanZero = minusOne.filter(new FilterFunction<Integer>\n    @Override\n    public boolean filter Integer value) throws Exception {\n        return value > 0;\n    }\n});\n\n//对迭代流应用迭代条件\niterate.closeWith(stillGreatorThanZero);\n\n//迭代流数据输出,无论是否满足迭代条件都会输出\niterate.print();\nenv.execute();\n```"}, {"bbox": [134, 1126, 403, 1173], "category": "Title", "text": "## • Scala代码实现"}, {"bbox": [122, 1223, 1438, 2031], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheECTL_api.scaLA_\n\nval ds1: DataStream� String] = env.socketTextStream(\"node5\", 9999)\n\n//转换数据流\nval ds2: DataStream Int] = ds1.map(v => v.toInt)\n//定义迭代流,并指定迭代体和迭代条件\nval result: DataStream Int] = ds2.iterate(\n    iteration => {\n        //定义迭代体\n        val minusOne: DataStream Int] = iteration.map(v => {printIn(\"迭代体中value值为:\" + v); v - 1})\n\n        //定义迭代条件,满足的继续迭代\n        val stillGreatorThanZero: DataStream Int] = minusOne.filter(_ > 0)\n\n        //定义哪些数据最后进行输出\n        val lessThanZero: DataStream Int] = minusOne.filter(_ <= 0)\n    }\n)\n```"}]