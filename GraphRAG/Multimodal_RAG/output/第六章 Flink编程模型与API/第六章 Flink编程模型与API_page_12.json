[{"bbox": [137, 131, 314, 174], "category": "List-item", "text": "## java代码"}, {"bbox": [127, 227, 1602, 1751], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\nKafkaSource[Tuple2<String, String>> kafkaSource = KafkaSource.<Tuple2<String, String>>builder()\n    .setBootstrapServers(\"node1:9092,node2:9092,node3:9092\") //设置Kafka 集群节点\n    .setTopics(\"testtopic\") //设置读取的topic\n    .set GroupId(\"my-test-group\") //设置消费者组\n    .setStartingOffsets(Offsets Initializer.latest()) //设置读取数据位置\n    .set Deserializer(new KafkaRecordDeserializationSchema[Tuple2<String, String>>() {\n        //设置key,value 数据获取后如何处理\n        @Override\n        public void desynchronize(ConsumerRecord(byte[], byte[]) consumerRecord, Collector[Tuple2<String, String>>>\n                String key = null;\n                String value = null;\n                if(consumerRecord.key() != null){\n                    key = new String(consumerRecord.key(), \"UTF-8\");\n                }\n                if(consumerRecord.value() != null){\n                    value = new String(consumerRecord.value(), \"UTF-8\");\n                }\n                collector.collect(Tuple2.of(key, value));\n            }\n        //设置置返回的二元组类型\n        @Override\n        public TypeInformation[Tuple2<String, String>> getProducedType() {\n            return TypeInformation.of(new TypeHint[Tuple2<String, String>>() {\n            });\n        }\n    })\n    .build();\n\nDataStreamSource[Tuple2<String, String>> kafkaDS = env.fromSource(kafkaSource, WatermarkStrategy.no\n    kafkaDS.print();\n\nenv.execute();\n```"}, {"bbox": [137, 1806, 408, 1846], "category": "List-item", "text": "## Scala代码如下"}, {"bbox": [127, 1903, 1434, 2067], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\nimport org.apacheomatic.flink api.scala._\n\nval kafkaSource: KafkaSource[(String, String)] = KafkaSource builder[(String, String)]()\n```"}]