[{"bbox": [122, 100, 1602, 612], "category": "Text", "text": "```java\n}\n});\n\n// keyedStream.reduce((v1, v2) -> Tuple2.of(v1.f0, v1.f1 + v2.f1)).print();\nkeyedStream.reduce(new ReduceFunction[Tuple2<String, Integer]]() {\n    @Override\n    public Tuple2<String, Integer> reduce(Tuple2<String, Integer> v1, Tuple2<String, Integer> v2) throws\n            return Tuple2.of(v1.f0, v1.f1 + v2.f1);\n}\n}).print();\n\nenv.execute();\n```"}, {"bbox": [135, 661, 401, 705], "category": "Title", "text": "## • Scala代码实现"}, {"bbox": [122, 754, 1436, 1353], "category": "Text", "text": "```groovy\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheECTLFLINKSCALA\n\nval ds: DataStream[(String, Int)] = env.fromCollection(List(\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n    (\"a\", 4),\n    (\"b\", 5)))\n\nds.keyBy.tp->{tp._1})\n  .reduce((v1,v2)->{(v1._1,v1._2+v2._2)}).print()\n\nenv.execute()\n```"}, {"bbox": [113, 1416, 360, 1469], "category": "Section-header", "text": "## 6.4.7 union"}, {"bbox": [113, 1508, 1571, 1604], "category": "Text", "text": "union算子是Flink流处理框架中数据流合并算子,可以将多个输入的EUR流多个数据流进行合并,并输出一个新的EUR流数据流作为结果,适用于需要将多个数据流合并为一个流的场景。"}, {"bbox": [113, 1640, 1566, 1735], "category": "Text", "text": "需要注意的是union合并的数据流类型必须相同,合并之后的数据流包含两个或多个流中所有元素,并且数据类型不变。下图表示将两个流进行合并得到合并后的结果流,并将结果输出到下游。"}]