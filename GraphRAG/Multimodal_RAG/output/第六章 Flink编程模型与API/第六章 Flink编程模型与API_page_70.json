[{"bbox": [122, 99, 1605, 1759], "category": "Text", "text": "```java\nString[] arr = line.split(\",\");\nreturn Tuple2.of(arr[0], Integer.parseInt(arr[1 ghost]));\n}).returns(Types.TUPLE(Types.STRING, Types.INT));\n```"}, {"bbox": [128, 271, 328, 310], "category": "Text", "text": "### 用户基本信息"}, {"bbox": [128, 315, 1319, 566], "category": "Text", "text": "```java\nDataStreamSource[Tuple2<String, String>> sideDS = env.fromCollection Arrays.asList(Tuple2.of(\"zs\", \"北京\"),\n        Tuple2.of(\"ls\", \"上海\"),\n        Tuple2.of(\"ww\", \"广州\"),\n        Tuple2.of(\"ml\", \"深圳\"),\n        Tuple2.of(\"tq\", \"杭州\")));\n```"}, {"bbox": [128, 611, 1603, 653], "category": "Text", "text": "```java\nMapStateDescriptor<String, String> msd = new MapStateDescriptor< \"map-descriptor\", String.class, String >();\n```"}, {"bbox": [128, 698, 468, 735], "category": "Text", "text": "### 将用户基本信息广播出去"}, {"bbox": [128, 740, 1213, 780], "category": "Text", "text": "```java\nBroadcastStream[Tuple2<String, String>> broadcast = sideDS broadcasts(msd);\n```"}, {"bbox": [128, 825, 389, 863], "category": "Text", "text": "### 连接两个流,并处理"}, {"bbox": [128, 868, 1600, 1756], "category": "Text", "text": "```java\nmainDS.connect(broadcast).process(new BroadcastProcessFunction<Tuple2<String, Integer>, Tuple2< String, String >>\n    //处理主流数据\n    @Override\n    public void processElement(Tuple2< String, Integer > scoreInfo, BroadcastProcessFunction<Tuple2< String, String >, String > broadcastState) {\n        //获取广播状态\n        ReadOnlyBroadcastState< String, String > broadcastState = ctx.getBroadcastState(msd);\n        //获取用户基本信息\n        String cityAddr = broadcastState.get(scoreInfo.f0);\n        out.collect(\"姓名:\" + scoreInfo.f0 + \",地址:\" + cityAddr + \",分数\" + scoreInfo.f1);\n    }\n\n    //处理广播流数据\n    @Override\n    public void processBroadcastElement(Tuple2< String, String > baseInfo, BroadcastProcessFunction<Tuple2< String, String >, String > broadcastState) {\n        //获取广播状态\n        BroadcastState< String, String > broadcastState = ctx.getBroadcastState(msd);\n        broadcastState.put(baseInfo.f0, baseInfo.f1);\n    }\n\n}).print();\n\nenv.execute();\n```"}, {"bbox": [135, 1809, 401, 1851], "category": "Title", "text": "## Scala代码实现"}, {"bbox": [128, 1906, 1436, 2030], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apache.flink api Born_\n```"}]