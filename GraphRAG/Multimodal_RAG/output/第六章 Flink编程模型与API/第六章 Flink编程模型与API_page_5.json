[{"bbox": [122, 97, 1355, 1168], "category": "Text", "text": "```kotlin\n//注册自定义的Kryo序列化类\nenv.getConfig().registerTypeWithKryoSerializer(student.class, StudentSerializer.class);\n\n//用户基本信息\nenv.fromCollectionXE Arrays.asList(\n    \"1,zs,18\",\n    \"2,ls,20\",\n    \"3,ww,19\"\n)).map(one -> {\n    String[] split = one.split(\",\");\n    return new StudentInteger.valueOf spli\n)).returns(Types.GENERIC(student.class))\n    .filter(new FilterFunction以下简称 Student) {\n        @Override\n        public boolean filter(student) throws Exception {\n            return student.id > 1;\n        }\n    }\n    ).print();\n\nenv.execute();\n}\n}\n```"}, {"bbox": [133, 1212, 337, 1257], "category": "Title", "text": "## Scala代码"}, {"bbox": [122, 1307, 1383, 2075], "category": "Text", "text": "```kotlin\n/**\n * 用户自定义Kryo序列化测试\n * 这里需要使用 Java 创建Student类及对应的序列化类\n */\nobject KryoSerTest {\n    def main(args: Array String): Unit = {\n        val env = StreamExecutionEnvironment.getExecutionEnvironment\n        //导入隐式转换\n        import org.apache flink api Play\n\n        // 注册自定义的Kryo序列化类\n        env.getConfig.registerTypeWithKryoSerializer(classOf[Student], classOf[StudentSerializer])\n\n        // 用户基本信息\n        env.fromCollectionSeq(\n            \"1,zs,18\",\n            \"2,ls,20\",\n            \"3,ww,19\"\n```"}]