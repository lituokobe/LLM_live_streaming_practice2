[{"bbox": [108, 99, 1563, 253], "category": "Text", "text": "connect生成的结果保留了两个输入流的类型信息,例如: dataStream1数据集为(String, Int)元祖类型, dataStream2数据集为Int类型,通过connect连接算子将两个不同数据类型的流结合在一起,其内部数据为[(String, Int), Int]的混合数据类型,保留了两个原始数据集的数据类型。"}, {"bbox": [108, 284, 1556, 483], "category": "Text", "text": "对于连接后的数据流可以使用map、 flatMap、process等算子进行操作,但内部方法使用的是CoMapFunction、CoFlatMapFunction、CoProcessFunction等函数来进行处理,这些函数称作“协处理函数”,分别接收两个输入流中的元素,并生成一个新的数据流作为输出,输出结果 DataStream类型保持一致。"}, {"bbox": [129, 515, 391, 567], "category": "Title", "text": "## Java代码实现"}, {"bbox": [120, 613, 1609, 1511], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nuloadStreamSource[Tuple2<String, Integer>> ds1 = env.fromCollectionITE arrays = (Integer, 1);\nuloadStreamSourceb = env.fromCollection arrays;\n\n// Connect 两个流, 类型可以不一样, 只能连接两个流\nConnectedStreams[Tuple2<String, Integer>, String> connect = ds1.connect(ds2);\n\n//可以对连接后的流使用map、 flatMap、process等算子进行操作,但内部方法使用的是CoMap、CoFlatMap、CoP\nSingleOutputStreamOperator[Tuple2<String, Integer>> result = connect.process(new CoProcessFunction<1\n    @Override\n    public void processElement1(Tuple2<String, Integer> tuple2, CoProcessFunction[Tuple2 String, Integer>\n        out.collect Simpleset tuple2);\n    }\n\n    @Override\n    public void processElement2(String value, CoProcessFunction[Tuple2 String, Integer>, String, Tuple2 Str\n        out.collect Simpleset.of(value, 1));\n    }\n\n));\nresult.print();\nenv.execute();\n```"}, {"bbox": [129, 1551, 406, 1606], "category": "Title", "text": "## Scala代码实现"}, {"bbox": [120, 1649, 1443, 1996], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheomatichinkapi scala.\nval ds1: DataStream[(String, Int)] = env.fromCollectionE List((\"a\", 1), (\"b\", 2), (\"c\", 3))\nval ds2: DataStream到底 String] = env.fromCollectionE List(\"aa\", \"bb\", \"cc\")\n//connect连接两个流,两个流的数据类型可以不一样\nval result: DataStream[(String, Int)] =\n    ds1.connect(ds2).map.tp => tp, value => {(value, 1)}\n```"}]