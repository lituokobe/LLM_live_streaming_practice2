[{"bbox": [127, 102, 314, 310], "category": "Text", "text": "(6,\"a6\",23),\n(7,\"a7\",24),\n(8,\"a8\",25),\n(9,\"a9\",26),\n(10,\"a10\",27);"}, {"bbox": [113, 376, 576, 429], "category": "Title", "text": "### 6.10.3.2 异步请求客户端"}, {"bbox": [113, 465, 1222, 510], "category": "Text", "text": "这里使用Java Vertx来异步连接MySQL,需要在项目依赖包中导入如下依赖:"}, {"bbox": [129, 561, 706, 1027], "category": "Text", "text": "```xml\n <!-- Flink 异步IO 需要的 Vertx 依赖包 -->\n<dependency>\n  <groupId>io vertx</groupId>\n  <artifactId>vertx-jdbc-client</ artifactId>\n  <version> ${vertx.version}</version>\n</dependency>\n<dependency>\n  <groupId>io vertx</groupId>\n  < artifactId>vertx-core</ artifactId>\n  <version> ${vertx.version}</version>\n</dependency>\n```"}, {"bbox": [136, 1079, 394, 1121], "category": "Title", "text": "* **Java代码实现:**"}, {"bbox": [126, 1175, 1595, 2063], "category": "Text", "text": "```java\nyi/**\n * 实现Flink异步IO方式一:使用 Vert.x 实现异步 IO\n * 案例:读取MySQL中的数据\n*/\npublic class AsyncIOTest1 {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        //为了测试效果,这里设置并行度为1\n        env.setParallelism(1);\n        //准备数据流\n        DataStreamSource<Integer> idDS = env.fromCollection Cárrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n\n        /**\n         * 使用异步IO,参数解释如下:\n         * 第一个参数是输入数据流,\n         * 第二个参数是异步IO的实现类,\n         * 第三个参数是用于完成异步操作超时时间,\n         * 第四个参数是超时时间单位,\n         * 第五个参数可以触发的最大异步i/o操作数\n         */\n        AsyncDataStream.unorderedWait(idDS, new AsyncDatabaseRequest1(), 5000, TimeUnit.MICROSECONDS,\n```"}]