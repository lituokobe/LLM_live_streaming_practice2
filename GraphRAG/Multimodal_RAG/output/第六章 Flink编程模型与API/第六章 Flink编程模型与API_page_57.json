[{"bbox": [125, 102, 1284, 907], "category": "Text", "text": "```java\nreturn new RedisCommandDescription(RedisCommand.HSET, \"flink-java-redis\");\n}\n\n@Override\npublic String getKeyFromData(Tuple2<String, Integer> tp) {\n    //指定Redis Key\n    return tp.f0;\n}\n\n@Override\npublic StringzigValueFromData(Tuple2 <String, Integer> tp) {\n    //指定Redis Value\n    return tp.f1 + \"\";\n}\n});\n\n//将结果写入Redis\nresult.addSink CompanySink);\nenv.execute();\n```"}, {"bbox": [136, 959, 401, 1001], "category": "Title", "text": "## Scala代码实现"}, {"bbox": [125, 1056, 1584, 2069], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//设置隐式转换\nimport org.apache flink api scala_\n\n/**\n * Socket 中输入数据格式:\n * hello,world\n * hello,flink\n * hello,scala\n * hello,spark\n * hello,hadoop\n */\nval ds: DataStream [String] = env.socketTextStream(\"node5\", 9999)\n\n//统计wordCount\nval result: DataStream[(String, Int)] = ds flatMap (.split (\",\"))\n.map( (x, 1))\n.keyBy(._1)\n.sum(1)\n\n//准备RedisSink对象\nval config: FlinkJedisPoolConfig = new FlinkJedisPoolConfig. Builder().setHost(\"node4\").setPort(6379).build()\nval redisSink = new RedisSink[(String, Int)] (config, new RedisMapper[(String, Int)] {\n    //指定写入Redis的命令\n```"}]