[{"bbox": [110, 115, 883, 192], "category": "Section-header", "text": "# 6 第六章 Flink编程模型与API"}, {"bbox": [108, 222, 1586, 373], "category": "Text", "text": "本章节中我们针对Flink的编程模型与API进行讲解，主要基于ibiDataStream API进行编程，学习Flink编程方式，处理数据流程以及转换处理，本章节中涉及到的代码实现使用Java和Scala两种语言来实现。"}, {"bbox": [110, 421, 425, 488], "category": "Section-header", "text": "## 6.1 Flink API"}, {"bbox": [110, 522, 1570, 620], "category": "Text", "text": "Flink为用户提供了多个层级API，用户可以根据自己使用的需求来选择，不同的API层级可以混用以实现复杂的业务逻辑，Flink API层级如下："}, {"bbox": [127, 705, 1561, 1330], "category": "Picture"}, {"bbox": [127, 1378, 616, 1437], "category": "List-item", "text": "* Stateful Stream Processing"}, {"bbox": [110, 1466, 1575, 1565], "category": "Text", "text": "底层的状态流处理API的抽象程度最低，而且只能用于流处理，提供了非常灵活的接口，可以用于自定义底层与状态、时间相关的操作。"}, {"bbox": [129, 1597, 571, 1650], "category": "List-item", "text": "* DataSteam/DataSet API"}, {"bbox": [108, 1683, 1568, 1833], "category": "Text", "text": "这一层级的API是Flink中的核心API，这一层级中要处理的数据会被抽象成数据流（ibiDataStream）或数据集（DataSet），然后在其上通过定义转换操作实现业务逻辑，例如：map/flatMap/window /keyby/sum/join等，这一层级API的使用风格与Java 8中的Stream使用风格十分类似。"}, {"bbox": [129, 1865, 340, 1914], "category": "List-item", "text": "* Table API"}]