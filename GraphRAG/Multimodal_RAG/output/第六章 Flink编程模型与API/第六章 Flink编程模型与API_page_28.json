[{"bbox": [128, 157, 1556, 895], "category": "Picture"}, {"bbox": [128, 946, 393, 997], "category": "List-item", "text": "* **Java代码实现**"}, {"bbox": [128, 1047, 1410, 1260], "category": "Text", "text": "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nDataStreamSourcelest = env.fromCollection(Arrays.asList(1, 2, 3, 4));\nDataStreamSourceInteger = env.fromCollection(Arrays.asList(5, 6, 7, 8));\nds1.union(ds2).print();\nenv.execute();\n```"}, {"bbox": [132, 1307, 403, 1355], "category": "List-item", "text": "* **Scala代码实现**"}, {"bbox": [128, 1405, 1437, 1698], "category": "Text", "text": "```scala\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apacheECTL.Chi.sca\nval ds1: DataStream[Int] = env.fromCollection(List(1, 2, 3, 4))\nval ds2: DataStream[Int] = env.fromCollection(List(5, 6, 7, 8))\nds1.union(ds2).print()\nenv.execute()\n```"}, {"bbox": [112, 1766, 415, 1822], "category": "Section-header", "text": "### 6.4.8 connect"}, {"bbox": [112, 1858, 1572, 2054], "category": "Text", "text": "connect算子将两个输入的uliDataStream数据流作为参数，将两个不同数据类型的uliDataStream数据流连接在一起，生成一个ConnectedStreams对象作为结果，与union算子不同，union只是简单的将两个类型一样的流合并在一起，而connect算子可以将不同类型的uliDataStream连接在一起，并且connect只能连接两个流。"}]