[{"bbox": [122, 113, 1605, 712], "category": "Text", "text": "```groovy\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nKafkaSource&lt;String&gt; kafkaSource = KafkaSource.&lt;String&gt;builder()\n    .setBootstrapServers(\"node1:9092,node2:9092,node3:9092\") //设置Kafka 集群节点\n    .setTopics(\"testtopic\") //设置读取的topic\n    .set GROUPId(\"my-test-group\") //设置消费者组\n    .setStartingOffsets(Offsets Initializer.latest()) //设置读取数据位置\n    . valueOnly Deserializer(new SimpleStringSchema()) //设置value的反序列化格式\n    .build();\n\nuloaDS = env.fromSource(kafkaSource, WatermarkStrategy.noWatermarks(), \"kafka\");\nkafkaDS.print();\n\nenv.execute();\n```"}, {"bbox": [135, 759, 432, 804], "category": "Title", "text": "### Scala代码如下："}, {"bbox": [122, 854, 1605, 1579], "category": "Text", "text": "```groovy\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n\nimport org.apacheECTL.ecap.ETCLap\n\nval kafkaSource: KafkaSource[String] = KafkaSource builder [String] ()\n    .setBootstrapServers(\"node1:9092,node2:9092,node3:9092\") //设置Kafka集群Brokers\n    .setTopics(\"testtopic\") //设置topic\n    .set GROUPId(\"my-test-group\") //设置消费者组\n    .setStartingOffsets(Offsets Initializer.latest()) // 读取位置\n    . valueOnly Deserializer(new SimpleStringSchema()) //设置Value的反序列化格式\n    .build()\n\nval kafkaDS: DataStream [String] = env.fromSource(kafkaSource, WatermarkStrategy.noWatermarks(), \"kafka\");\nkafkaDS.print()\n\nenv.execute()\n```"}, {"bbox": [112, 1626, 1466, 1674], "category": "Text", "text": "代码编写完成后执行，向kafka testtopic中输入如下数据，可以在控制台看到对应数据结果。"}, {"bbox": [126, 1722, 1602, 1976], "category": "Text", "text": "```\n[root@node1 bin]# kafka-console-producer.sh --bootstrap-server node1:9092,node2:9092,node3:9092--topic\n>value1\n>value2\n>value3\n>value4\n>value5\n```"}, {"bbox": [112, 2040, 803, 2096], "category": "Title", "text": "## 6.3.4.2 读取Kafka中Key、Value数据"}]