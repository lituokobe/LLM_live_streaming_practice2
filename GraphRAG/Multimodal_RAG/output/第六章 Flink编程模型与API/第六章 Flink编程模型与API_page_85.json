[{"bbox": [111, 98, 501, 163], "category": "Section-header", "text": "### 6.10.3 异步IO代码"}, {"bbox": [111, 192, 688, 240], "category": "Text", "text": "Flink中使用异步IO时，代码逻辑如下："}, {"bbox": [124, 287, 1604, 633], "category": "Text", "text": "```java\n#创建原始数据流\nerezStream&lt;String&gt; stream = ...;\n\n#使用Flink异步IO - 顺序输出(每个task中)\nerezStream&lt;Tuple2&lt;String, String&gt;&gt; resultStream = Async伪Stream.orderedWait(stream, new AsyncDa\n\n#使用Flink异步IO - 乱序输出\nerezStream&lt;Tuple2&lt;String, String&gt;&gt; resultStream = Async伪Stream.unorderedWait(stream, new Async\n```"}, {"bbox": [111, 678, 1415, 775], "category": "Text", "text": "Flink Async I/O 输出提供乱序和顺序两种模式，异步IO实现方法分别为:orderedWait和\nunorderedWait，两种方法都有5个参数，解释如下："}, {"bbox": [130, 812, 1270, 1092], "category": "List-item", "text": "* 第一个参数是输入数据流；\n* 第二个参数是异步IO的实现类，该类需要继承RichAsyncFunction抽象类。\n* 第三个参数是用于完成异步操作超时时间；\n* 第四个参数是超时时间单位；\n* 第五个参数可以触发的最大异步i/o操作数；"}, {"bbox": [111, 1128, 1580, 1225], "category": "Text", "text": "下面我们以Flink通过异步IO方式读取MySQL中的数据为例，分别来演示“异步请求客户端”和“线程池模拟异步请求客户端”两种实现异步请求的使用方式。"}, {"bbox": [111, 1275, 452, 1331], "category": "Section-header", "text": "#### 6.10.3.1 数据准备"}, {"bbox": [111, 1364, 590, 1412], "category": "Text", "text": "在MySQL中创建表并插入数据："}, {"bbox": [122, 1458, 500, 2099], "category": "Text", "text": "```sql\n#mysql使用库并建表\nuse mydb;\ncreate table async_tbl(\n    id int,\n    name varchar(255),\n    age int\n);\n\n#插入数据\ninsert into async_tbl values\n(1, \"a1\", 18),\n(2, \"a2\", 19),\n(3, \"a3\", 20),\n(4, \"a4\", 21),\n(5, \"a5\", 22),\n```"}]