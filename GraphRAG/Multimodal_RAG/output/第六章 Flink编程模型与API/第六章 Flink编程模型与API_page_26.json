"[{\"bbox\": [123, 99, 1619, 190], \"category\": \"Text\", \"text\": \"```\\nStationLog{sid='sid1', callOut='18600000000', callIn='18600000001', callType='success', callTime=16853435}\\nStationLog{sid='sid1', callOut='18600000004', callIn='18600000005', callType='success', callTime=16853435}\\n```\"}, {\"bbox\": [111, 250, 391, 309], \"category\": \"Section-header\", \"text\": \"### 6.4.6 reduce\"}, {\"bbox\": [111, 344, 1583, 542], \"category\": \"Text\", \"text\": \"reduce算子是一种聚合算子，它接受一个函数作为参数，并将输入的KeyedStream中的元素进行两两聚合操作，该函数将两个相邻的元素作为输入参数，并生成一个新的Stream数据流作为输出。与其他聚合函数如sum、min、max等不同，reduce算子的聚合函数可以自定义实现，因此可以适用于更广泛的聚合操作。\"}, {\"bbox\": [111, 577, 1587, 677], \"category\": \"Text\", \"text\": \"Reduce作用于KeyedStream，输出Stream对象。下图表示通过reduce算子对输入数据集中的元素进行求和操作，并将结果输出到下游。\"}, {\"bbox\": [123, 767, 1578, 1394], \"category\": \"Picture\"}, {\"bbox\": [131, 1444, 391, 1492], \"category\": \"Section-header\", \"text\": \"* **Java代码实现**\"}, {\"bbox\": [123, 1541, 1615, 2100], \"category\": \"Text\", \"text\": \"```java\\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n\\nStreamSource[Tuple2<String, Integer>> ds = env.fromCollectionITE arrays LIST\\n    .of(\"a\", 1),\\n    .of(\\\"b\\\", 2),\\n    .of(\\\"c\\\", 3),\\n    .of(\\\"a\\\", 4),\\n    .of(\\\"b\\\", 5));\\n\\nKeyedStream[Tuple2<String, Integer>, String> keyedStream = ds.keyBy(new KeySelector[Tuple2 String\\n    @Override\\n    public String getKey(Tuple2 String, Integer) throws Exception {\\n        return tp.f0;\\n    }\\n```\"}]"