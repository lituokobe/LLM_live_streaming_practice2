[{"bbox": [124, 96, 1614, 1806], "category": "Text", "text": "```java\n    @Override\n    public void open(Configuration parameters) throws Exception {\n        ValueStateDescriptor<Long> time = new ValueStateDescriptor(\"time\", Long.class);\n        timeState = getRuntimeContext(). state(time);\n    }\n\n    //每来一条数据,调用一次\n    @Override\n    public void processElement(StationLog value, KeyedProcessFunction<String, StationLog, String>.Context context) {\n        //从状态中获取上次状态存储时间\n        Long time = timeState.value();\n        //如果时间为null,说明是第一条数据,注册定时器\n        if(\"fail\".equals(value callType) && time == null) {\n            //获取当前时间\n            long nowTime = ctx/timerService().currentProcessingTime();\n            //注册定时器,5秒后触发\n            long onTime = nowTime + 5000;\n            ctx/timerService().registerProcessingTimeTimer(onTime);\n            //更新状态\n            timeState.update(onTime);\n        }\n\n        // 表示有呼叫成功了,可以取消触发器\n        if (!value callType.equals(\"fail\") && time != null) {\n            ctx/timerService().deleteProcessingTimeTimer(time);\n            timeState.clear();\n        }\n\n    }\n\n    //定时器触发时调用,执行触发器,发出告警\n    @Override\n    public void onTimer(long timestamp, KeyedProcessFunction<String, StationLog, String>.OnTimerContext out) {\n        out.collect(\"触发时间:\" + timestamp + \" 被叫手机号:\" + ctx.getCurrentKey() + \" 连续5秒呼叫失败!\");\n        //清空时间状态\n        timeState.clear();\n    }\n\n}).print();\n\nenv.execute();\n```"}, {"bbox": [133, 1848, 405, 1896], "category": "Title", "text": "## • Scala代码实现"}, {"bbox": [124, 1944, 1440, 2076], "category": "Text", "text": "```groovy\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n//导入隐式转换\nimport org.apache.flink_api scala._\n```"}]